def flag = false;
pipeline {
    agent none
    stages {
        stage('Build') {
			agent { label 'principal' }
            steps {
                echo 'No hay que compilar nada, estoy en linux'
                sh 'ls -la'
                sh '''
				whoami
				hostname
				echo $WORKSPACE
                '''
				stash includes: 'app/calc.py,app/util.py,test/unit/**,*.ini', name: 'unit'
				stash includes: 'app/**,test/**,*.ini', excludes: 'test/unit/**', name: 'rest'
            }
        }
        stage('Boot wiremock') {
            agent { label 'agent2' }
            options { skipDefaultCheckout() }
            steps {
                unstash 'rest'
                sh 'nohup java -jar test/wiremock.jar --port 9090 --root-dir test/wiremock > wiremock.log 2>&1 &'
                script {
                    def maxTries = 3
                    def tries = 0
                    def success = false

                    while (!success && tries < maxTries) {
                        try {
                            sh 'curl -o /dev/null -s -w "%{http_code}\n" http://127.0.0.1:9090/calc/sqrt/64 '
                            success = true
                            flag = true
                        } catch (Exception e) {
                            tries++
                            sleep(5)
                        }
                    }
                }
            }
        }
        stage('Test'){
            parallel {
                stage('Unit') {
					agent { label 'agent1' }
					options { skipDefaultCheckout() }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
							unstash 'unit'
                            sh '''
							whoami
						    hostname
							echo $WORKSPACE
                            . /home/jenkins/venv/bin/activate
                            export PYTHONPATH=$WORKSPACE
                            pytest --junitxml=result-unit.xml test/unit
                            '''
							stash includes: 'result-*.xml', name: 'unit'
                        }
                    }

                    post {
                        always {
                            cleanWs()
                        }
                    }
                }
                stage('Services') {
					agent { label 'agent2' }
                    when { expression { flag == true } }
					options {
                        reuseNode true
                        skipDefaultCheckout()
                    }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                            ps aux
							whoami
						    hostname
							echo $WORKSPACE
                            . /home/jenkins/venv/bin/activate
                            export PYTHONPATH=$WORKSPACE
                            export FLASK_APP=app/api.py
                            nohup flask run > flask.log 2>&1 &
                            pytest --junitxml=result-rest.xml test/rest
                            '''
							stash includes: 'result-*.xml', name: 'services'
                        }
                    }
                }
            }
        }
        stage('Results') {
			agent { label 'principal' }
			options { skipDefaultCheckout() }
            steps {
                sh '''
				whoami
				hostname
				echo $WORKSPACE
                '''
				unstash 'unit'
				unstash 'services'
                junit 'result*.xml'
            }

            post {
                always {
                    cleanWs()
				}
			}
        }
    }
}