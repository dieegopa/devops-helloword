def flag = false;
pipeline {
    agent none
    stages {
        stage('Build') {
			agent { label 'principal' }
            steps {
                echo 'No hay que compilar nada, estoy en linux'
                sh 'ls -la'
                sh '''
				whoami
				hostname
				echo $WORKSPACE
                '''
				stash includes: 'app/calc.py,app/util.py,test/unit/**,*.ini', name: 'unit'
				stash includes: 'app/**,test/**,*.ini', excludes: 'test/unit/**', name: 'rest'
            }
        }
        stage('Boot wiremock') {
            agent { label 'agent2' }
            steps {
                script {
                    sh '''
                        nohup java -jar test/wiremock.jar --port 9090 --root-dir test/wiremock > wiremock.log 2>&1 &

                        maxRetries=3
                        attempts=0
                        success=false

                        while [ $attempts -lt $maxRetries ] && [ $success == false ]; do
                            attempts=$((attempts + 1))

                            responseCode=$(curl -o /dev/null -s -w "%{http_code}\\n" http://127.0.0.1:9090/calc/sqrt/64)

                            if [ "$responseCode" == "200" ]; then
                                success=true
                                echo "WireMock iniciado correctamente."
                            else
                                echo "Intento ${attempts}: Código HTTP ${responseCode}. Reintentando en 5 segundos..."
                                sleep 5
                            fi
                        done

                        # Si no se obtuvo un código 200 después de los intentos
                        if [ "$success" == false ]; then
                            echo "No se pudo obtener un código 200 después de ${maxRetries} intentos."
                            flag = true
                            exit 1
                        fi
                    '''
                }
            }
        }
        stage('Test'){
            parallel {
                stage('Unit') {
					agent { label 'agent1' }
					options { skipDefaultCheckout() }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
							unstash 'unit'
                            sh '''
							whoami
						    hostname
							echo $WORKSPACE
                            . /home/jenkins/venv/bin/activate
                            export PYTHONPATH=$WORKSPACE
                            pytest --junitxml=result-unit.xml test/unit
                            '''
							stash includes: 'result-*.xml', name: 'unit'
                        }
                    }

                    post {
                        always {
                            cleanWs()
                        }
                    }
                }
                stage('Services') {
                    when { expression { flag == true } }
					agent { label 'agent2' }
					options { skipDefaultCheckout() }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
							unstash 'rest'
                            sh '''
							whoami
						    hostname
							echo $WORKSPACE
                            . /home/jenkins/venv/bin/activate
                            export PYTHONPATH=$WORKSPACE
                            export FLASK_APP=app/api.py
                            nohup flask run > flask.log 2>&1 &
                            pytest --junitxml=result-rest.xml test/rest
                            '''
							stash includes: 'result-*.xml', name: 'services'
                        }
                    }

				    post {
				        always {
				            sh '''
				            pkill -f "flask run" || true
				            pkill -f "wiremock" || true
				            '''
				            cleanWs()
				        }
				    }
                }
            }
        }
        stage('Results') {
			agent { label 'principal' }
			options { skipDefaultCheckout() }
            steps {
                sh '''
				whoami
				hostname
				echo $WORKSPACE
                '''
				unstash 'unit'
				unstash 'services'
                junit 'result*.xml'
            }

            post {
                always {
                    cleanWs()
				}
			}
        }
    }
}