def flagFlask = false;
def flagWiremock = false;
pipeline {
    agent none
    stages {
        stage('Build') {
			agent { label 'principal' }
            steps {
                echo 'No hay que compilar nada, estoy en linux'
                sh 'ls -la'
                sh '''
				whoami
				hostname
				echo $WORKSPACE
                '''
				stash includes: 'app/calc.py,app/util.py,test/unit/**,*.ini', name: 'unit'
				stash includes: 'app/**,test/**,*.ini', excludes: 'test/unit/**', name: 'rest'
            }
        }
        stage('Test'){
            parallel {
                stage('Unit') {
					agent { label 'agent1' }
					options { skipDefaultCheckout() }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
							unstash 'unit'
                            sh '''
							whoami
						    hostname
							echo $WORKSPACE
                            . /home/jenkins/venv/bin/activate
                            export PYTHONPATH=$WORKSPACE
                            pytest --junitxml=result-unit.xml test/unit
                            '''
							stash includes: 'result-*.xml', name: 'unit'
                        }
                    }

                    post {
                        always {
                            cleanWs()
                        }
                    }
                }
                stage('Services') {
					agent { label 'agent2' }
					options { skipDefaultCheckout() }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            unstash 'rest'
                            sh '''
							whoami
						    hostname
							echo $WORKSPACE
                            . /home/jenkins/venv/bin/activate
                            export PYTHONPATH=$WORKSPACE
                            export FLASK_APP=app/api.py
                            nohup flask run > flask.log 2>&1 &
                            nohup java -jar test/wiremock.jar --port 9090 --root-dir test/wiremock > wiremock.log 2>&1 &
                            '''
                            script {
                                def maxTries = 3
                                def tries = 0
                                def responseCodeFlask = "000"
                                while (tries < maxTries && responseCodeFlask != "200") {
                                    try {
                                        responseCodeFlask = sh(script: 'curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:5000', returnStdout: true).trim()
                                    } catch (Exception e) {
                                        tries++
                                        sleep 5
                                    }
                                }

                                if(responseCodeFlask == "200") {
                                    flagFlask = true
                                }

                                def responseCodeWiremock = "000"

                                while (tries < maxTries && responseCodeWiremock != "200") {
                                    try {
                                        responseCodeWiremock = sh(script: 'curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:9090/calc/sqrt/64', returnStdout: true).trim()
                                    } catch (Exception e) {
                                        tries++
                                        sleep 5
                                    }
                                }

                                if(responseCodeWiremock == "200") {
                                    flagWiremock = true
                                }

                                if(flagFlask && flagWiremock) {
                                    sh'''
                                        . /home/jenkins/venv/bin/activate
                                        export PYTHONPATH=$WORKSPACE
                                        pytest --junitxml=result-services.xml test/services
                                    '''
                                    stash includes: 'result-*.xml', name: 'services'
                                } else {
                                    currentBuild.result = 'FAILURE'
                                }

                            }
                        }
                    }

                    post {
				        always {
				            sh '''
				            pkill -f "flask run" || true
				            pkill -f "wiremock" || true
				            '''
				            cleanWs()
				        }
				    }
                }
            }
        }
        stage('Results') {
			agent { label 'principal' }
			options { skipDefaultCheckout() }
            steps {
                sh '''
				whoami
				hostname
				echo $WORKSPACE
                '''
				unstash 'unit'
				unstash 'services'
                junit 'result*.xml'
            }

            post {
                always {
                    cleanWs()
				}
			}
        }
    }
}